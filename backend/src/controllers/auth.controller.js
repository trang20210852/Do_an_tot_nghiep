const mysql = require("../config/db");
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const jwt = require("jsonwebtoken");
const authModel = require("../services/auth.service");

// üìå H√†m t·∫°o token
const generateToken = (userId, role) => {
    return jwt.sign({ id: userId, role }, "secret_key", { expiresIn: "7d" });
};

// const generateToken = (userId, role, IDTruong = null) => {
//     return jwt.sign(
//         {
//             IDPhuHuynh: userId, // üëà D√πng ƒë√∫ng t√™n tr∆∞·ªùng ƒë·ªÉ l·∫•y ra sau n√†y
//             Role: role,
//             IDTruong,
//         },
//         process.env.JWT_SECRET || "super_secret_key",
//         { expiresIn: "7d" }
//     );
// };

// üìå H√†m g·ª≠i email
const sendEmail = async (to, subject, text) => {
    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: "mamnonxanh1906@gmail.com",
            pass: "qexd bhlh ydfp bpqy",
        },
    });

    const mailOptions = {
        from: "your-email@gmail.com",
        to,
        subject,
        text,
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log("[SUCCESS] Email Sent!");
    } catch (error) {
        console.error("[ERROR] Failed to Send Email:", error);
    }
};

const registerTruongHoc = async (req, res) => {
    console.log("[DEBUG] registerTruongHoc - Request Body:", req.body);

    try {
        const { tenTruong, diaChi, SDT, email_business, email_hieutruong, ngayThanhLap, loaiHinh } = req.body;

        // Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!tenTruong || !diaChi || !SDT || !email_business || !email_hieutruong || !ngayThanhLap || !loaiHinh) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        // Validate email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email_business) || !emailRegex.test(email_hieutruong)) {
            return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
        }

        // Validate s·ªë ƒëi·ªán tho·∫°i (10-11 s·ªë)
        const phoneRegex = /^\d{10,11}$/;
        if (!phoneRegex.test(SDT)) {
            return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i d√†i 10-11 s·ªë" });
        }

        // Validate ng√†y th√†nh l·∫≠p (yyyy-mm-dd)
        if (!/^\d{4}-\d{2}-\d{2}$/.test(ngayThanhLap)) {
            return res.status(400).json({ message: "Ng√†y th√†nh l·∫≠p kh√¥ng h·ª£p l·ªá! ƒê·ªãnh d·∫°ng yyyy-mm-dd" });
        }

        // N·∫øu d√πng multer upload file cloudinary
        let giayPhepHoatDong = null;
        if (req.file && req.file.path) {
            giayPhepHoatDong = req.file.path;
        }

        // G·ªçi Model ƒë·ªÉ t·∫°o tr∆∞·ªùng h·ªçc v√† t√†i kho·∫£n Hi·ªáu tr∆∞·ªüng
        const {
            IDTruong,
            matKhau,
            email_hieutruong: email,
        } = await authModel.registerTruongHoc({
            tenTruong,
            diaChi,
            SDT,
            email_business,
            email_hieutruong,
            ngayThanhLap,
            giayPhepHoatDong,
            loaiHinh,
        });

        console.log("[SUCCESS] TruongHoc Registered - ID:", IDTruong);

        // G·ª≠i m·∫≠t kh·∫©u ƒë·∫øn email c·ªßa Hi·ªáu tr∆∞·ªüng
        await sendEmail(email, "T√†i kho·∫£n Hi·ªáu tr∆∞·ªüng", `M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p c·ªßa b·∫°n: ${matKhau}`);

        // T·∫°o token ƒëƒÉng nh·∫≠p cho tr∆∞·ªùng
        const token = generateToken(IDTruong, "Tr∆∞·ªùng H·ªçc");

        res.status(201).json({ message: "ƒêƒÉng k√Ω tr∆∞·ªùng h·ªçc th√†nh c√¥ng! M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email Hi·ªáu tr∆∞·ªüng.", token });
    } catch (error) {
        console.error("[ERROR] registerTruongHoc Failed:", error);
        res.status(500).json({ error: error.message });
    }
};

// // üìå ƒêƒÉng k√Ω Tr∆∞·ªùng H·ªçc v√† T·∫°o Hi·ªáu Tr∆∞·ªüng
// const registerTruongHoc = async (req, res) => {
//     console.log("[DEBUG] registerTruongHoc - Request Body:", req.body);

//     try {
//         const { tenTruong, diaChi, SDT, email_business, email_hieutruong, ngayThanhLap, loaiHinh } = req.body;
//         // N·∫øu d√πng multer upload file cloudinary
//         let giayPhepHoatDong = null;
//         if (req.file && req.file.path) {
//             giayPhepHoatDong = req.file.path;
//         }

//         // G·ªçi Model ƒë·ªÉ t·∫°o tr∆∞·ªùng h·ªçc v√† t√†i kho·∫£n Hi·ªáu tr∆∞·ªüng
//         const {
//             IDTruong,
//             matKhau,
//             email_hieutruong: email,
//         } = await authModel.registerTruongHoc({
//             tenTruong,
//             diaChi,
//             SDT,
//             email_business,
//             email_hieutruong,
//             ngayThanhLap,
//             giayPhepHoatDong,
//             loaiHinh,
//         });

//         console.log("[SUCCESS] TruongHoc Registered - ID:", IDTruong);

//         // G·ª≠i m·∫≠t kh·∫©u ƒë·∫øn email c·ªßa Hi·ªáu tr∆∞·ªüng
//         await sendEmail(email, "T√†i kho·∫£n Hi·ªáu tr∆∞·ªüng", `M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p c·ªßa b·∫°n: ${matKhau}`);

//         // T·∫°o token ƒëƒÉng nh·∫≠p cho tr∆∞·ªùng
//         const token = generateToken(IDTruong, "Tr∆∞·ªùng H·ªçc");

//         res.status(201).json({ message: "ƒêƒÉng k√Ω tr∆∞·ªùng h·ªçc th√†nh c√¥ng! M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email Hi·ªáu tr∆∞·ªüng.", token });
//     } catch (error) {
//         console.error("[ERROR] registerTruongHoc Failed:", error);
//         res.status(500).json({ error: error.message });
//     }
// };

// üìå ƒêƒÉng k√Ω C√°n B·ªô (Y√™u c·∫ßu ch·ªù ph√™ duy·ªát)
const registerCanBo = async (req, res) => {
    try {
        const { hoTen, gioiTinh, ngaySinh, diaChi, SDT, email, IDTruong, matKhau } = req.body;

        // Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!hoTen || !gioiTinh || !ngaySinh || !diaChi || !SDT || !email || !IDTruong || !matKhau) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        // Validate email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
        }

        // Validate s·ªë ƒëi·ªán tho·∫°i (10-11 s·ªë)
        const phoneRegex = /^\d{10,11}$/;
        if (!phoneRegex.test(SDT)) {
            return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i d√†i 10-11 s·ªë" });
        }

        // Validate m·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±
        if (typeof matKhau !== "string" || matKhau.length < 6) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!" });
        }

        // C√≥ th·ªÉ ki·ªÉm tra tr√πng email ho·∫∑c SDT ·ªü ƒë√¢y n·∫øu mu·ªën

        const hashedPassword = await bcrypt.hash(matKhau, 10);

        // ƒêƒÉng k√Ω c√°n b·ªô nh∆∞ng KH√îNG c·∫•p token ngay (ch·ªù ph√™ duy·ªát)
        const IDCanBo = await authModel.registerCanBo({
            hoTen,
            gioiTinh,
            ngaySinh,
            diaChi,
            SDT,
            email,
            IDTruong,
            matKhau: hashedPassword,
        });

        res.status(201).json({ message: "ƒêƒÉng k√Ω c√°n b·ªô th√†nh c√¥ng! Vui l√≤ng ch·ªù ph√™ duy·ªát t·ª´ nh√† tr∆∞·ªùng.", IDCanBo });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// // üìå ƒêƒÉng k√Ω C√°n B·ªô (Y√™u c·∫ßu ch·ªù ph√™ duy·ªát)
// const registerCanBo = async (req, res) => {
//     try {
//         const { hoTen, gioiTinh, ngaySinh, diaChi, SDT, email, IDTruong, matKhau } = req.body;
//         const hashedPassword = await bcrypt.hash(matKhau, 10);

//         // ƒêƒÉng k√Ω c√°n b·ªô nh∆∞ng KH√îNG c·∫•p token ngay (ch·ªù ph√™ duy·ªát)
//         const IDCanBo = await authModel.registerCanBo({
//             hoTen,
//             gioiTinh,
//             ngaySinh,
//             diaChi,
//             SDT,
//             email,
//             IDTruong,
//             matKhau: hashedPassword,
//         });

//         res.status(201).json({ message: "ƒêƒÉng k√Ω c√°n b·ªô th√†nh c√¥ng! Vui l√≤ng ch·ªù ph√™ duy·ªát t·ª´ nh√† tr∆∞·ªùng.", IDCanBo });
//     } catch (error) {
//         res.status(500).json({ error: error.message });
//     }
//};
// üìå ƒêƒÉng k√Ω Ph·ª• Huynh
const registerPhuHuynh = async (req, res) => {
    try {
        const { hoTen, gioiTinh, ngaySinh, diaChi, CCCD, SDT, email, matKhau } = req.body;

        // Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!hoTen || !gioiTinh || !ngaySinh || !diaChi || !CCCD || !SDT || !email || !matKhau) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        // Validate email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
        }

        // Validate s·ªë ƒëi·ªán tho·∫°i (10-11 s·ªë)
        const phoneRegex = /^\d{10,11}$/;
        if (!phoneRegex.test(SDT)) {
            return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i d√†i 10-11 s·ªë" });
        }

        // Validate m·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±
        if (typeof matKhau !== "string" || matKhau.length < 6) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!" });
        }

        // C√≥ th·ªÉ ki·ªÉm tra tr√πng email ho·∫∑c SDT ·ªü ƒë√¢y n·∫øu mu·ªën

        const hashedPassword = await bcrypt.hash(matKhau, 10);

        // ƒêƒÉng k√Ω ph·ª• huynh v√† l·∫•y ID
        const IDPhuHuynh = await authModel.registerPhuHuynh({
            hoTen,
            gioiTinh,
            ngaySinh,
            diaChi,
            CCCD,
            SDT,
            email,
            matKhau: hashedPassword,
        });

        // T·∫°o token cho ph·ª• huynh
        const token = generateToken(IDPhuHuynh, "Ph·ª• Huynh");

        res.status(201).json({ message: "ƒêƒÉng k√Ω ph·ª• huynh th√†nh c√¥ng!", token, IDPhuHuynh });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// const login = async (req, res) => {
//     try {
//         const { emailOrPhone, matKhau, role } = req.body;

//         if (!emailOrPhone || !matKhau || !role) {
//             return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
//         }

//         const [users] = await authModel.findUserByEmailOrPhone(emailOrPhone, role);

//         if (!users || users.length === 0) {
//             return res.status(401).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
//         }

//         const user = users[0];

//         if (!user.matKhau) {
//             return res.status(500).json({ message: "L·ªói d·ªØ li·ªáu: M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!" });
//         }

//         // const isMatch = await bcrypt.compare(matKhau, user.matKhau);
//         // if (!isMatch) {
//         //     return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u!" });
//         // }

//         let IDTruong = null;
//         let ID = null;
//         if (role === "C√°n B·ªô") {
//             const [result] = await authModel.findTruongByCanBo(user.IDNhanVien);
//             IDTruong = result.length > 0 ? result[0].IDTruong : null;
//             ID = user.IDNhanVien;
//         } else if (role === "Ph·ª• Huynh") {
//             ID = user.IDPhuHuynh;
//             // üìå N·∫øu sau n√†y mu·ªën l·∫•y IDTruong t·ª´ h·ªçc sinh li√™n k·∫øt th√¨ x·ª≠ l√Ω th√™m ·ªü ƒë√¢y
//         } else {
//             ID = user.ID; // fallback cho c√°c vai tr√≤ kh√°c
//         }

//         const tokenPayload = {
//             ID,
//             Role: role,
//             Email: user.Email || null,
//             IDTruong,
//         };

//         const token = jwt.sign(tokenPayload, process.env.JWT_SECRET || "super_secret_key", { expiresIn: "7d" });

//         res.json({
//             message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
//             token,
//             user: {
//                 ID,
//                 Role: role,
//                 Email: user.Email || null,
//                 IDTruong,
//             },
//         });
//     } catch (error) {
//         console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
//         res.status(500).json({ message: "L·ªói server!" });
//     }
// };

// const login = async (req, res) => {
//     try {
//         const { emailOrPhone, matKhau, role } = req.body;

//         if (!emailOrPhone || !matKhau || !role) {
//             console.log("[DEBUG] ‚ùå Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p:", { emailOrPhone, matKhau, role }); // üëà Log 1
//             return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
//         }

//         const [users] = await authModel.findUserByEmailOrPhone(emailOrPhone, role);

//         if (!users || users.length === 0) {
//             console.log("[DEBUG] ‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i:", { emailOrPhone, role }); // üëà Log 2
//             return res.status(401).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
//         }

//         const user = users[0];

//         if (!user.matKhau) {
//             console.log("[DEBUG] ‚ùå M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá trong c∆° s·ªü d·ªØ li·ªáu:", user); // üëà Log 3
//             return res.status(500).json({ message: "L·ªói d·ªØ li·ªáu: M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!" });
//         }

//         // const isMatch = await bcrypt.compare(matKhau, user.matKhau);
//         // if (!isMatch) {
//         //     console.log("[DEBUG] ‚ùå Sai m·∫≠t kh·∫©u:", { emailOrPhone }); // üëà Log 4
//         //     return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u!" });
//         // }

//         let IDTruong = null;
//         let ID = null;
//         let subRole = null;
//         if (role === "C√°n B·ªô") {
//             const [result] = await authModel.findTruongByCanBo(user.IDNhanVien);
//             console.log("[DEBUG] ‚úÖ K·∫øt qu·∫£ t√¨m tr∆∞·ªùng c·ªßa c√°n b·ªô:", result); // üëà Log 5
//             IDTruong = result.length > 0 ? result[0].IDTruong : null;
//             ID = user.IDNhanVien;
//             subRole = user.role;
//         } else if (role === "Ph·ª• Huynh") {
//             ID = user.IDPhuHuynh;
//             console.log("[DEBUG] ‚úÖ ƒêƒÉng nh·∫≠p ph·ª• huynh:", { ID }); // üëà Log 6
//         } else {
//             ID = user.ID; // fallback cho c√°c vai tr√≤ kh√°c
//             console.log("[DEBUG] ‚úÖ ƒêƒÉng nh·∫≠p vai tr√≤ kh√°c:", { ID }); // üëà Log 7
//         }

//         const tokenPayload = {
//             ID,
//             Role: role,

//             SubRole: subRole,
//             Email: user.Email || null,
//             IDTruong,
//         };

//         console.log("[DEBUG] ‚úÖ Payload token:", tokenPayload); // üëà Log 8

//         const token = jwt.sign(tokenPayload, process.env.JWT_SECRET || "super_secret_key", { expiresIn: "7d" });

//         res.json({
//             message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
//             token,
//             user: {
//                 ID,
//                 Role: role,
//                 SubRole: subRole,
//                 Email: user.Email || null,
//                 IDTruong,
//             },
//         });
//     } catch (error) {
//         console.error("[DEBUG] ‚ùå L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p:", error); // üëà Log 9
//         res.status(500).json({ message: "L·ªói server!" });
//     }
// };

const login = async (req, res) => {
    try {
        const { emailOrPhone, matKhau, role } = req.body;

        if (!emailOrPhone || !matKhau || !role) {
            console.log("[DEBUG] ‚ùå Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p:", { emailOrPhone, matKhau, role }); // üëà Log 1
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        // Validate m·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±
        if (typeof matKhau !== "string" || matKhau.length < 6) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!" });
        }

        // Validate emailOrPhone kh√¥ng ƒë∆∞·ª£c r·ªóng
        if (!emailOrPhone || typeof emailOrPhone !== "string") {
            return res.status(400).json({ message: "Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
        }
        const [users] = await authModel.findUserByEmailOrPhone(emailOrPhone, role);

        if (!users || users.length === 0) {
            console.log("[DEBUG] ‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i:", { emailOrPhone, role }); // üëà Log 2
            return res.status(401).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
        }

        const user = users[0];

        if (!user.matKhau) {
            console.log("[DEBUG] ‚ùå M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá trong c∆° s·ªü d·ªØ li·ªáu:", user); // üëà Log 3
            return res.status(500).json({ message: "L·ªói d·ªØ li·ªáu: M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!" });
        }

        const isMatch = await bcrypt.compare(matKhau, user.matKhau);
        if (!isMatch) {
            console.log("[DEBUG] ‚ùå Sai m·∫≠t kh·∫©u:", { emailOrPhone }); // üëà Log 4
            return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u!" });
        }

        let IDTruong = null;
        let ID = null;
        let subRole = null;
        if (role === "C√°n B·ªô") {
            const [result] = await authModel.findTruongByCanBo(user.IDNhanVien);
            console.log("[DEBUG] ‚úÖ K·∫øt qu·∫£ t√¨m tr∆∞·ªùng c·ªßa c√°n b·ªô:", result); // üëà Log 5
            IDTruong = result.length > 0 ? result[0].IDTruong : null;
            ID = user.IDNhanVien;
            subRole = user.role;
        } else if (role === "Ph·ª• Huynh") {
            ID = user.IDPhuHuynh;
            console.log("[DEBUG] ‚úÖ ƒêƒÉng nh·∫≠p ph·ª• huynh:", { ID }); // üëà Log 6
        } else {
            ID = user.ID; // fallback cho c√°c vai tr√≤ kh√°c
            console.log("[DEBUG] ‚úÖ ƒêƒÉng nh·∫≠p vai tr√≤ kh√°c:", { ID }); // üëà Log 7
        }

        const tokenPayload = {
            ID,
            Role: role,
            SubRole: subRole,
            Email: user.Email || null,
            IDTruong,
        };

        console.log("[DEBUG] ‚úÖ Payload token:", tokenPayload); // üëà Log 8

        const token = jwt.sign(tokenPayload, process.env.JWT_SECRET || "super_secret_key", { expiresIn: "7d" });

        res.json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
            token,
            user: {
                ID,
                Role: role,
                SubRole: subRole,
                Email: user.Email || null,
                IDTruong,
                hoTen: user.hoTen, // üëà Th√™m hoTen v√†o payload tr·∫£ v·ªÅ
                avatar: user.Avatar, // üëà Th√™m avatar v√†o payload tr·∫£ v·ªÅ
            },
        });
    } catch (error) {
        console.error("[DEBUG] ‚ùå L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p:", error); // üëà Log 9
        res.status(500).json({ message: "L·ªói server!" });
    }
};

// üìå ƒêƒÉng xu·∫•t
const logout = (req, res) => {
    res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
};

module.exports = {
    registerTruongHoc,
    registerCanBo,
    registerPhuHuynh,
    login,
    logout,
};
